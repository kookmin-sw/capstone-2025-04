name: Deploy Frontend to S3/CloudFront

on:
  workflow_dispatch: # 수동으로 실행 가능
  push:
    branches:
      - master # main 브랜치에 푸시될 때 실행
      - "release/**" # release/ 로 시작하는 브랜치 푸시 시 실행

permissions:
  id-token: write # AWS OIDC 인증에 필요
  contents: read # 코드 체크아웃에 필요

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production # GitHub Environment 설정과 연동 가능 (Secrets 등)

    steps:
      - name: Checkout code
        # 태그가 가리키는 커밋을 체크아웃합니다.
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }} # 푸시된 태그를 체크아웃

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Debug OIDC Token
        run: |
          echo "Attempting to decode OIDC token..."
          oidc_token=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value')
          if [ -z "$oidc_token" ]; then
            echo "Failed to retrieve OIDC token"
            exit 1
          fi
          echo "OIDC Token retrieved, decoding payload..."
          payload=$(echo "$oidc_token" | jq -R 'split(".")[1] | @base64d' -r)
          if [ $? -ne 0 ] || [ -z "$payload" ]; then
            echo "Failed to decode token payload"
            exit 1
          fi
          echo "Decoded Payload:"
          echo "$payload" | jq .
          echo "Subject Claim (sub): $(echo "$payload" | jq -r '.sub')"
        env:
          ACTIONS_ID_TOKEN_REQUEST_TOKEN: ${{ secrets.ACTIONS_ID_TOKEN_REQUEST_TOKEN }}
          ACTIONS_ID_TOKEN_REQUEST_URL: ${{ runner.environment.ACTIONS_ID_TOKEN_REQUEST_URL }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }} # Make sure AWS_REGION secret is also set for this step

      - name: Install dependencies
        working-directory: ./frontend
        run: npm install

      - name: Build Next.js static site
        working-directory: ./frontend
        run: npm run build
        # Inject NEXT_PUBLIC_ variables required by the build process
        env:
          # --- 여기에 환경 변수 설정 ---
          # These names MUST match the process.env. keys in your configureAmplify.ts
          # And the values MUST reference the corresponding GitHub Secrets
          NEXT_PUBLIC_AWS_REGION: ${{ secrets.NEXT_PUBLIC_AWS_REGION }}
          NEXT_PUBLIC_COGNITO_USER_POOL_ID: ${{ secrets.NEXT_PUBLIC_COGNITO_USER_POOL_ID }}
          NEXT_PUBLIC_COGNITO_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_COGNITO_CLIENT_ID }}
          NEXT_PUBLIC_COGNITO_DOMAIN: ${{ secrets.NEXT_PUBLIC_COGNITO_DOMAIN }}
          # 프로덕션 URL 설정 (CloudFront 도메인 사용)
          NEXT_PUBLIC_APP_BASE_URL: https://${{ secrets.ROUTE53_DOMAIN_NAME }} # GitHub Secret (Terraform 'app' 출력값: cloudfront_distribution_domain_name)
          # API Gateway Invoke URL (Community API)
          NEXT_PUBLIC_COMMUNITY_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_COMMUNITY_API_BASE_URL }} # GitHub Secret (API Gateway Invoke URL)
          # NODE_ENV: production # Optional: Explicitly set Node environment for build if needed
          NEXT_PUBLIC_CHATBOT_API_ENDPOINT: ${{ secrets.NEXT_PUBLIC_CHATBOT_API_ENDPOINT }}
          NEXT_PUBLIC_PROBLEM_GENERATION_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_PROBLEM_GENERATION_API_BASE_URL }}
          NEXT_PUBLIC_PROBLEM_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_PROBLEM_API_BASE_URL }}
          NEXT_PUBLIC_CODE_GRADER_BASE_URL: ${{ secrets.NEXT_PUBLIC_CODE_GRADER_BASE_URL }}
          NEXT_PUBLIC_SUBMISSIONS_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_SUBMISSIONS_API_BASE_URL }}

          # ---------------------------

      - name: Sync files to S3
        # Use the AWS credentials configured earlier
        run: |
          aws s3 sync ./frontend/out s3://${{ secrets.AWS_S3_BUCKET_NAME }} --delete
        # No need for separate env here, AWS creds are already configured for the job

      - name: Invalidate CloudFront cache
        # Use the AWS credentials configured earlier
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
        # No need for separate env here
