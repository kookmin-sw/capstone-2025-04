{
  "Comment": "사용자 코드 제출 채점 워크플로우 (Fargate 사용, 결과 S3 저장)",
  "StartAt": "Prepare Fargate Inputs",
  "States": {
    "Prepare Fargate Inputs": {
      "Type": "Pass",
      "Comment": "Step Functions Map 상태에서 각 Fargate 작업에 공통적으로 필요한 파라미터 준비",
      "ResultPath": "$.fargateInputs",
      "Parameters": {
        "taskDefinitionArn.$": "$.taskDefinitionArn",
        "clusterName.$": "$.clusterName",
        "subnets.$": "$.subnets",
        "securityGroups.$": "$.securityGroups",
        "s3BucketName.$": "$.s3BucketName",
        "s3KeyPrefix.$": "$.s3KeyPrefix",
        "submissionId.$": "$.submissionId"
      },
      "Next": "Map Over Testcases"
    },
    "Map Over Testcases": {
      "Type": "Map",
      "Comment": "테스트 케이스 배열 순회, 각 Fargate 작업 병렬 실행",
      "InputPath": "$",
      "ItemsPath": "$.testcases",
      "MaxConcurrency": 10,
      "ResultPath": "$.taskResults",
      "Parameters": {
        "fargateParams.$": "$.fargateInputs",
        "testcase.$": "$$.Map.Item.Value",
        "testcaseId.$": "$$.Map.Item.Index",
        "originalInput.$": "$"
      },
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "DISTRIBUTED",
          "ExecutionType": "STANDARD"
        },
        "StartAt": "Run Code on Fargate",
        "States": {
          "Run Code on Fargate": {
            "Type": "Task",
            "Resource": "arn:aws:states:::ecs:runTask.sync",
            "Comment": "Fargate 작업을 동기 실행하고 결과를 파싱 시도",
            "Parameters": {
              "LaunchType": "FARGATE",
              "Cluster.$": "$.fargateParams.clusterName",
              "TaskDefinition.$": "$.fargateParams.taskDefinitionArn",
              "NetworkConfiguration": {
                "AwsvpcConfiguration": {
                  "Subnets.$": "$.fargateParams.subnets",
                  "SecurityGroups.$": "$.fargateParams.securityGroups",
                  "AssignPublicIp": "ENABLED"
                }
              },
              "Overrides": {
                "ContainerOverrides": [
                  {
                    "Name": "code-runner-container",
                    "Environment": [
                      {
                        "name": "USER_CODE",
                        "value.$": "$.originalInput.code"
                      },
                      {
                        "name": "LANGUAGE",
                        "value.$": "$.originalInput.language"
                      },
                      {
                        "name": "TIME_LIMIT",
                        "value.$": "States.Format('{}', $.originalInput.timeLimit)"
                      },
                      {
                        "name": "MEMORY_LIMIT",
                        "value.$": "States.Format('{}', $.originalInput.memoryLimit)"
                      },
                      { "name": "INPUT_DATA", "value.$": "$.testcase.input" },
                      {
                        "name": "EXPECTED_OUTPUT",
                        "value.$": "$.testcase.output"
                      },
                      {
                        "name": "S3_BUCKET_NAME",
                        "value.$": "$.fargateParams.s3BucketName"
                      },
                      {
                        "name": "S3_KEY_PREFIX",
                        "value.$": "$.fargateParams.s3KeyPrefix"
                      },
                      {
                        "name": "SUBMISSION_ID",
                        "value.$": "$.fargateParams.submissionId"
                      },
                      {
                        "name": "TESTCASE_ID",
                        "value.$": "States.Format('{}', $.testcaseId)"
                      }
                    ]
                  }
                ]
              }
            },
            "ResultSelector": {
              "Comment": "Fargate 작업의 결과(종료 사유 등)에서 runner.py의 JSON 출력을 파싱 시도. 실제 경로는 테스트 필요.",
              "RunnerOutputJson.$": "States.StringToJson($.Containers[0].Reason)"
            },
            "ResultPath": "$.fargateResult",
            "Catch": [
              {
                "ErrorEquals": ["States.ALL"],
                "ResultPath": "$.errorInfo",
                "Comment": "Fargate 작업 실행 중 발생한 모든 오류를 처리합니다.",
                "Next": "Handle Fargate Error"
              }
            ],
            "Next": "Prepare Output"
          },
          "Handle Fargate Error": {
            "Type": "Pass",
            "Comment": "Fargate 작업 실패 시 오류 정보를 포함한 결과를 반환합니다.",
            "Parameters": {
              "status": "FargateTaskFailed",
              "error.$": "$.errorInfo",
              "testcaseId.$": "$.testcaseId"
            },
            "ResultPath": "$.fargateResult.RunnerOutputJson",
            "Next": "Prepare Output"
          },
          "Prepare Output": {
            "Type": "Pass",
            "Comment": "다음 단계(result-processor)로 전달할 최종 출력 포맷 지정",
            "InputPath": "$.fargateResult.RunnerOutputJson",
            "End": true
          }
        }
      },
      "Next": "Process Results"
    },
    "Process Results": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Comment": "모든 Fargate 작업 결과를 취합하여 최종 채점 결과를 계산하고 저장하는 Lambda 함수 호출",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:REGION:ACCOUNT_ID:function:YourResultProcessorFunctionName",
        "Payload": {
          "originalInput.$": "$.originalInput",
          "taskResults.$": "$.taskResults"
        }
      },
      "ResultPath": "$.gradingResult",
      "OutputPath": "$.gradingResult.Payload",
      "End": true
    }
  }
}
